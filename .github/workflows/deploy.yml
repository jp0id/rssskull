name: Deploy RSS Skull Bot

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/runawaydevil/rss-skull-bot:latest
          ghcr.io/runawaydevil/rss-skull-bot:v0.5.0
          ghcr.io/runawaydevil/rss-skull-bot:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=RSS Skull Bot
          org.opencontainers.image.description=Modern RSS to Telegram Bot with Reddit support
          org.opencontainers.image.version=v0.5.0
          org.opencontainers.image.authors=Pablo Murad <runawaydevil@pm.me>
          org.opencontainers.image.url=https://github.com/runawaydevil/rssskull
          org.opencontainers.image.source=https://github.com/runawaydevil/rssskull
          org.opencontainers.image.licenses=MIT
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: RSS Skull Bot ${{ github.ref }}
        body: |
          ## üöÄ RSS Skull Bot ${{ github.ref }} - Halfway to definitive
          
          ### ‚ú® New Features
          - Reddit OAuth API integration
          - HTTP caching with ETag support
          - Performance metrics tracking
          - Circuit breaker for fault tolerance
          - Rate limiting improvements
          
          ### üê≥ Docker Image
          Available at: `ghcr.io/runawaydevil/rss-skull-bot:${{ github.ref }}`
          
          ### üì¶ Installation
          ```bash
          docker pull ghcr.io/runawaydevil/rss-skull-bot:${{ github.ref }}
          ```
        draft: false
        prerelease: false
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
      run: |
        echo "üöÄ Deploying RSS Skull Bot v0.5.0 to production..."
        echo "üìä Redis configurado na porta: $REDIS_PORT"
        # Adicione aqui os comandos de deploy espec√≠ficos do seu servidor
        # Exemplo: SSH, kubectl, docker-compose, etc.